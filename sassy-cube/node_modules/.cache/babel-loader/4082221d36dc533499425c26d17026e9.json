{"ast":null,"code":"export const toRadians = angle => angle * (Math.PI / 180);\nexport const toDegrees = angle => angle * (180 / Math.PI);\n/**Return is new position based on current position and resultant roation */\n\nexport const calcPosition = (position, roationVector, angleOfRotation) => {\n  const cos = angle => Math.cos(toRadians(angle));\n\n  const sin = angle => Math.sin(toRadians(angle));\n\n  const ux = roationVector[0];\n  const uy = roationVector[1];\n  const uz = roationVector[2];\n  const angle = angleOfRotation;\n  let x = position[0] * (cos(angle) + ux * ux * (1 - cos(angle))) + position[1] * (ux * uy * (1 - cos(angle)) - uz * sin(angle)) + position[2] * (ux * uz * (1 - cos(angle)) + uy * sin(angle));\n  let y = position[0] * (uy * ux * (1 - cos(angle)) + uz * sin(angle)) + position[1] * (cos(angle) + uy * uy * (1 - cos(angle))) + position[2] * (uy * uz * (1 - cos(angle)) - ux * sin(angle));\n  let z = position[0] * (uz * ux * (1 - cos(angle)) - uy * sin(angle)) + position[1] * (uz * uy * (1 - cos(angle)) + ux * sin(angle)) + position[2] * (cos(angle) + uz * uz * (1 - cos(angle)));\n  return [x, y, z];\n};\n/**Return is new angle of rotatio and rotation vecctor */\n\nexport const calculateResultantAngle = (alpha, roationVector, currentRotationVector, beta) => {\n  const cos = angle => Math.cos(toRadians(angle));\n\n  const sin = angle => Math.sin(toRadians(angle));\n\n  const lx = roationVector[0];\n  const ly = roationVector[1];\n  const lz = roationVector[2];\n  const mx = currentRotationVector[0];\n  const my = currentRotationVector[1];\n  const mz = currentRotationVector[2];\n  const gamaInverse = cos(alpha / 2) * cos(beta / 2) - sin(alpha / 2) * sin(beta / 2) * (lx * mx + ly * my + lz * mz);\n  const gama = 2 * toDegrees(Math.acos(Math.abs(gamaInverse) > 1 ? gamaInverse / Math.abs(gamaInverse) : gamaInverse));\n  const nx = (sin(alpha / 2) * cos(beta / 2) * lx + cos(alpha / 2) * sin(beta / 2) * mx + sin(alpha / 2) * sin(beta / 2) * (ly * mz - lz * my)) / sin(gama / 2);\n  const ny = (sin(alpha / 2) * cos(beta / 2) * ly + cos(alpha / 2) * sin(beta / 2) * my + sin(alpha / 2) * sin(beta / 2) * (lz * mx - lx * mz)) / sin(gama / 2);\n  const nz = (sin(alpha / 2) * cos(beta / 2) * lz + cos(alpha / 2) * sin(beta / 2) * mz + sin(alpha / 2) * sin(beta / 2) * (lx * my - ly * mx)) / sin(gama / 2);\n  return {\n    gama,\n    rotationVector: [isNaN(nx) || !isFinite(nx) ? 1 : nx, isNaN(ny) || !isFinite(nx) ? 1 : ny, isNaN(nz) || !isFinite(nx) ? 1 : nz]\n  };\n};\nexport const getCubePositionDiffrence = (movedPosition, currentPosition, xMove, yMove) => {\n  const xDiff = currentPosition[0] + xMove - movedPosition[0];\n  const yDiff = currentPosition[1] + yMove - movedPosition[1];\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n};\nexport const getTouchPositions = eve => {\n  if (eve.targetTouches) {\n    return {\n      clientX: eve.targetTouches[0].clientX,\n      clientY: eve.targetTouches[0].clientY\n    };\n  } else {\n    return {\n      clientX: eve.clientX,\n      clientY: eve.clientY\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Users\\dpmas\\Desktop\\JS Example\\test\\SunHacksSassyCube\\sassy-cube\\src\\utilities\\utilities.js"],"names":["toRadians","angle","Math","PI","toDegrees","calcPosition","position","roationVector","angleOfRotation","cos","sin","ux","uy","uz","x","y","z","calculateResultantAngle","alpha","currentRotationVector","beta","lx","ly","lz","mx","my","mz","gamaInverse","gama","acos","abs","nx","ny","nz","rotationVector","isNaN","isFinite","getCubePositionDiffrence","movedPosition","currentPosition","xMove","yMove","xDiff","yDiff","sqrt","getTouchPositions","eve","targetTouches","clientX","clientY"],"mappings":"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","sourcesContent":["export const toRadians = (angle) => (angle * (Math.PI / 180));\r\nexport const toDegrees = (angle) => (angle * (180 / Math.PI));\r\n\r\n/**Return is new position based on current position and resultant roation */\r\nexport const calcPosition = (position, roationVector, angleOfRotation) => {\r\n    const cos = (angle) => (Math.cos(toRadians(angle)));\r\n    const sin = (angle) => (Math.sin(toRadians(angle)));\r\n    const ux = roationVector[0];\r\n    const uy = roationVector[1];\r\n    const uz = roationVector[2];\r\n    const angle = angleOfRotation;\r\n    let x = position[0] * (cos(angle) + ux * ux * (1 - cos(angle))) +\r\n        position[1] * (ux * uy * (1 - cos(angle)) - uz * sin(angle)) +\r\n        position[2] * (ux * uz * (1 - cos(angle)) + uy * sin(angle));\r\n\r\n    let y = position[0] * (uy * ux * (1 - cos(angle)) + uz * sin(angle)) +\r\n        position[1] * (cos(angle) + uy * uy * (1 - cos(angle))) +\r\n        position[2] * (uy * uz * (1 - cos(angle)) - ux * sin(angle));\r\n\r\n    let z = position[0] * (uz * ux * (1 - cos(angle)) - uy * sin(angle)) +\r\n        position[1] * (uz * uy * (1 - cos(angle)) + ux * sin(angle)) +\r\n        position[2] * (cos(angle) + uz * uz * (1 - cos(angle)));\r\n    return [x, y, z];\r\n};\r\n\r\n/**Return is new angle of rotatio and rotation vecctor */\r\nexport const calculateResultantAngle = (alpha, roationVector, currentRotationVector, beta) => {\r\n\r\n    const cos = (angle) => (Math.cos(toRadians(angle)));\r\n    const sin = (angle) => (Math.sin(toRadians(angle)));\r\n\r\n    const lx = roationVector[0];\r\n    const ly = roationVector[1];\r\n    const lz = roationVector[2];\r\n\r\n    const mx = currentRotationVector[0];\r\n    const my = currentRotationVector[1];\r\n    const mz = currentRotationVector[2];\r\n\r\n    const gamaInverse=cos(alpha / 2) * cos(beta / 2) - sin(alpha / 2) * sin(beta / 2) * (lx * mx + ly * my + lz * mz);\r\n    const gama = 2 * toDegrees(Math.acos(\r\n            Math.abs(gamaInverse)>1?gamaInverse/Math.abs(gamaInverse):gamaInverse\r\n        ));\r\n\r\n    const nx = ((\r\n        sin(alpha / 2) * cos(beta / 2) * lx +\r\n        cos(alpha / 2) * sin(beta / 2) * mx +\r\n        sin(alpha / 2) * sin(beta / 2) * (ly * mz - lz * my)\r\n    ) / sin(gama / 2));\r\n\r\n    const ny = ((\r\n        sin(alpha / 2) * cos(beta / 2) * ly +\r\n        cos(alpha / 2) * sin(beta / 2) * my +\r\n        sin(alpha / 2) * sin(beta / 2) * (lz * mx - lx * mz)\r\n    ) / sin(gama / 2))\r\n\r\n    const nz = ((\r\n        sin(alpha / 2) * cos(beta / 2) * lz +\r\n        cos(alpha / 2) * sin(beta / 2) * mz +\r\n        sin(alpha / 2) * sin(beta / 2) * (lx * my - ly * mx)\r\n    ) / sin(gama / 2))\r\n    return { gama, rotationVector: [isNaN(nx) || !isFinite(nx)?1:nx, isNaN(ny)||!isFinite(nx)?1:ny, isNaN(nz)||!isFinite(nx)?1:nz] };\r\n};\r\n\r\nexport const getCubePositionDiffrence=(movedPosition,currentPosition,xMove,yMove)=>{\r\n    const xDiff=(currentPosition[0]+xMove) - movedPosition[0];\r\n    const yDiff=(currentPosition[1]+yMove) - movedPosition[1];\r\n    return Math.sqrt(xDiff*xDiff + yDiff*yDiff);\r\n};\r\n\r\nexport const getTouchPositions=(eve)=>{\r\n    if(eve.targetTouches){\r\n        return {clientX:eve.targetTouches[0].clientX,clientY:eve.targetTouches[0].clientY};\r\n    }else{\r\n        return {clientX: eve.clientX, clientY: eve.clientY};\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}