{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dpmas\\\\Desktop\\\\JS Example\\\\test\\\\SunHacksSassyCube\\\\sassy-cube\\\\src\\\\components\\\\CubeContainer.js\";\nimport React, { Component } from 'react';\nimport Cube, { cubeWidth, facePosition } from './Cube';\nimport { calcPosition, calculateResultantAngle, getCubePositionDiffrence, getTouchPositions } from '../utilities/utilities';\n\nclass CubeContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.getOrientation = this.getOrientation.bind(this);\n    this.state = {\n      positions: [[0, 0, 0], [-cubeWidth, 0, 0], [cubeWidth, 0, 0], [0, -cubeWidth, 0], [0, cubeWidth, 0], [-cubeWidth, -cubeWidth, 0], [-cubeWidth, cubeWidth, 0], [cubeWidth, -cubeWidth, 0], [cubeWidth, cubeWidth, 0], [0, 0, -cubeWidth], [-cubeWidth, 0, -cubeWidth], [cubeWidth, 0, -cubeWidth], [0, -cubeWidth, -cubeWidth], [0, cubeWidth, -cubeWidth], [-cubeWidth, -cubeWidth, -cubeWidth], [-cubeWidth, cubeWidth, -cubeWidth], [cubeWidth, -cubeWidth, -cubeWidth], [cubeWidth, cubeWidth, -cubeWidth], [0, 0, cubeWidth], [-cubeWidth, 0, cubeWidth], [cubeWidth, 0, cubeWidth], [0, -cubeWidth, cubeWidth], [0, cubeWidth, cubeWidth], [-cubeWidth, -cubeWidth, cubeWidth], [-cubeWidth, cubeWidth, cubeWidth], [cubeWidth, -cubeWidth, cubeWidth], [cubeWidth, cubeWidth, cubeWidth]],\n      angleOfRotation: Array(27).fill(0),\n      rotationVector: Array(27).fill([1, 0, 0]),\n      faceRotationAngle: 0\n    };\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.rotateCube = this.rotateCube.bind(this);\n    this.reArrangeCubes = this.reArrangeCubes.bind(this);\n    this.rotateCubeSpace = this.rotateCubeSpace.bind(this);\n    this.faceRotationInit = this.faceRotationInit.bind(this);\n  }\n\n  componentDidMount() {\n    //adding listener for mouseup\n    this.elem.addEventListener('mouseup', this.onTouchEnd);\n    this.elem.addEventListener('touchend', this.onTouchEnd);\n    this.elem.addEventListener('touchcancel', this.onTouchEnd); //Initial position\n\n    this.rotateCubeSpace(120, 0);\n  }\n\n  componentWillUnmount() {\n    //removeEventListener        \n    this.elem.removeEventListener('mouseup', this.onTouchEnd);\n    this.elem.removeEventListener('touchend', this.onTouchEnd);\n    this.elem.removeEventListener('touchcancel', this.onTouchEnd);\n  }\n  /**return css parameters for orientation */\n\n\n  getOrientation(index) {\n    return [this.state.rotationVector[index][0], this.state.rotationVector[index][1], this.state.rotationVector[index][2], this.state.angleOfRotation[index]];\n  }\n  /**Touch events */\n\n\n  onTouchStart(eve) {\n    this.setState({\n      touchStarted: true,\n      mousePoint: {\n        x: getTouchPositions(eve).clientX,\n        y: getTouchPositions(eve).clientY\n      }\n    });\n  }\n\n  rotateCubeSpace(diffX, diffY) {\n    let arr = this.state.positions.slice();\n    let angleOfRotationArr = [];\n    let rotationVectorArr = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = Math.abs(diffY) > Math.abs(diffX) ? calcPosition(this.state.positions[i], [1, 0, 0], -diffY) : calcPosition(this.state.positions[i], [0, 1, 0], diffX);\n      let rotationResult = Math.abs(diffY) > Math.abs(diffX) ? calculateResultantAngle(-diffY, [1, 0, 0], this.state.rotationVector[i], this.state.angleOfRotation[i]) : calculateResultantAngle(diffX, [0, 1, 0], this.state.rotationVector[i], this.state.angleOfRotation[i]);\n      angleOfRotationArr[i] = rotationResult.gama;\n      rotationVectorArr[i] = rotationResult.rotationVector;\n    }\n\n    this.setState({\n      positions: arr,\n      angleOfRotation: angleOfRotationArr,\n      rotationVector: rotationVectorArr\n    });\n  }\n\n  onTouchMove(eve) {\n    if (this.state.touchStarted) {\n      let diffY = getTouchPositions(eve).clientY - this.state.mousePoint.y;\n      let diffX = getTouchPositions(eve).clientX - this.state.mousePoint.x;\n      this.setState({\n        mousePoint: {\n          x: getTouchPositions(eve).clientX,\n          y: getTouchPositions(eve).clientY\n        }\n      }, () => {\n        this.rotateCubeSpace(diffX, diffY);\n      });\n    } else if (this.state.touchedFace) {\n      let diffY = getTouchPositions(eve).clientY - this.state.mousePoint.y;\n      let diffX = getTouchPositions(eve).clientX - this.state.mousePoint.x;\n      this.setState({\n        mousePoint: {\n          x: getTouchPositions(eve).clientX,\n          y: getTouchPositions(eve).clientY\n        }\n      });\n      this.rotateCube(diffX / 2, diffY / 2, this.state.positions[this.state.facePositionIndex], this.state.touchedFace, this.getOrientation(this.state.facePositionIndex));\n    }\n  }\n\n  onTouchEnd() {\n    this.setState({\n      touchStarted: false,\n      mousePoint: {},\n      touchedFace: undefined\n    });\n\n    if (this.state.faceRotationIndex) {\n      this.reArrangeCubes();\n    }\n  }\n\n  reArrangeCubes() {\n    if (this.state.faceRotationAngle % 90 === 0) {\n      this.setState({\n        faceRotationAngle: 0,\n        faceRotationIndex: null,\n        autoRotation: undefined\n      });\n      return;\n    }\n\n    const currentMove = Math.abs(this.state.faceRotationAngle % 90) < 80 && Math.abs(this.state.faceRotationAngle % 90) > 10 ? 3 : 1;\n    this.setState({\n      autoRotation: true,\n      currentMove,\n      reverseAngle: !this.state.autoRotation && Math.abs(this.state.faceRotationAngle % 90) < 30 ? !this.state.reverseAngle : this.state.reverseAngle\n    }, () => {\n      this.rotateCube(Math.sqrt(.5), Math.sqrt(.5), null);\n      setTimeout(this.reArrangeCubes, .001);\n    });\n  }\n  /**Method triggered by child cube on cube movement*/\n\n\n  rotateCube(xAxisMove, yAxisMove, cubePosition, touchedFace, cubeOrientation) {\n    //avoid face roation while auto move.\n    if (this.state.autoRotation && touchedFace) return;\n    /** check for no movement*/\n\n    if (xAxisMove === 0 && yAxisMove === 0) return;\n    /**resultant move */\n\n    const currentMove = touchedFace ? Math.round(Math.sqrt(xAxisMove * xAxisMove + yAxisMove * yAxisMove)) : this.state.currentMove;\n    /**fetching state data */\n\n    let rotationVector = this.state.rotationVector.slice();\n    let angleOfRotation = this.state.angleOfRotation;\n    let arr = this.state.positions.slice();\n    /**face vectors for all six faces */\n\n    const sixFaceAxis = [[0, 0, 1], [0, 0, -1], [0, 1, 0], [0, -1, 0], [1, 0, 0], [-1, 0, 0]];\n    sixFaceAxis.forEach((faceAxis, f) => {\n      sixFaceAxis[f] = calcPosition(faceAxis, rotationVector[0], angleOfRotation[0]);\n    });\n    let index = 0;\n    let reverseAngle = false;\n\n    if (touchedFace) {\n      let movedPosition;\n      let diff = 1000; //check for face roation vector defined\n\n      if (this.state.faceRotationAngle) {\n        index = this.state.faceRotationIndex;\n        movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[index].slice(), currentMove);\n\n        if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\n          diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\n          reverseAngle = false;\n        }\n\n        movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[index].slice(), -currentMove);\n\n        if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\n          diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\n          reverseAngle = true;\n        }\n      } //fresh rotation\n      else {\n          let faceVector = [];\n          faceVector = calcPosition(facePosition[touchedFace], [cubeOrientation[0], cubeOrientation[1], cubeOrientation[2]], cubeOrientation[3]);\n          /**Finding face on which rotation gives matching cube movement */\n\n          for (let i in sixFaceAxis) {\n            if (Math.abs(cubePosition[0] * sixFaceAxis[i][0] + cubePosition[1] * sixFaceAxis[i][1] + cubePosition[2] * sixFaceAxis[i][2] - cubeWidth) < .1 && Math.abs(faceVector[0] * sixFaceAxis[i][0] + faceVector[1] * sixFaceAxis[i][1] + faceVector[2] * sixFaceAxis[i][2] - cubeWidth) > .1) {\n              movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[i].slice(), currentMove);\n\n              if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\n                diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\n                index = i;\n                reverseAngle = false;\n              }\n\n              movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[i].slice(), -currentMove);\n\n              if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\n                diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\n                index = i;\n                reverseAngle = true;\n              }\n            }\n          }\n        }\n\n      this.setState({\n        'faceRotationIndex': index,\n        \"reverseAngle\": reverseAngle\n      });\n    } else {\n      reverseAngle = this.state.reverseAngle;\n      index = this.state.faceRotationIndex;\n    }\n    /** calculating position of cubes in the face rotation */\n\n\n    for (let j = 0; j < arr.length; j++) {\n      let lineSum1 = arr[j][0] * sixFaceAxis[index][0];\n      let lineSum2 = arr[j][1] * sixFaceAxis[index][1];\n      let lineSum3 = arr[j][2] * sixFaceAxis[index][2];\n      /** filter for identifying cubes in the rotating face*/\n\n      if (Math.abs(lineSum1 + lineSum2 + lineSum3 - cubeWidth) < .1) {\n        arr[j] = calcPosition(this.state.positions[j], sixFaceAxis[index], reverseAngle ? -currentMove : currentMove);\n        const rotationResult = calculateResultantAngle(reverseAngle ? -currentMove : currentMove, sixFaceAxis[index], rotationVector[j].slice(), angleOfRotation[j]);\n        rotationVector[j] = rotationResult.rotationVector;\n        angleOfRotation[j] = rotationResult.gama;\n      }\n    }\n    /** setting u the state */\n\n\n    this.setState({\n      positions: arr,\n      angleOfRotation: angleOfRotation,\n      rotationVector: rotationVector,\n      faceRotationAngle: this.state.faceRotationAngle + (reverseAngle ? -currentMove : currentMove)\n    });\n  }\n\n  getScalingFactor() {\n    const minSize = window.innerHeight > window.innerWidth ? window.innerWidth : window.innerHeight;\n    return Math.min(Math.max(minSize / 300, 1), 1.5);\n  }\n\n  faceRotationInit(mousePoint, face, index) {\n    this.setState({\n      touchedFace: face,\n      mousePoint: mousePoint,\n      facePositionIndex: index\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: elem => this.elem = elem,\n      className: \"cube-container\",\n      style: {\n        transform: \"scale(\".concat(this.getScalingFactor(), \")\")\n      },\n      onMouseDown: this.onTouchStart,\n      onTouchStart: this.onTouchStart,\n      onMouseMove: this.onTouchMove,\n      onTouchMove: this.onTouchMove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, this.state.positions.map((val, index) => {\n      return React.createElement(Cube, {\n        key: index,\n        faceRotationInit: (mousePoint, face) => {\n          this.faceRotationInit(mousePoint, face, index);\n        },\n        translate: this.state.positions[index],\n        orientation: this.getOrientation(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nexport default CubeContainer;","map":{"version":3,"sources":["C:\\Users\\dpmas\\Desktop\\JS Example\\test\\SunHacksSassyCube\\sassy-cube\\src\\components\\CubeContainer.js"],"names":["React","Component","Cube","cubeWidth","facePosition","calcPosition","calculateResultantAngle","getCubePositionDiffrence","getTouchPositions","CubeContainer","constructor","props","getOrientation","bind","state","positions","angleOfRotation","Array","fill","rotationVector","faceRotationAngle","onTouchStart","onTouchMove","onTouchEnd","rotateCube","reArrangeCubes","rotateCubeSpace","faceRotationInit","componentDidMount","elem","addEventListener","componentWillUnmount","removeEventListener","index","eve","setState","touchStarted","mousePoint","x","clientX","y","clientY","diffX","diffY","arr","slice","angleOfRotationArr","rotationVectorArr","i","length","Math","abs","rotationResult","gama","touchedFace","facePositionIndex","undefined","faceRotationIndex","autoRotation","currentMove","reverseAngle","sqrt","setTimeout","xAxisMove","yAxisMove","cubePosition","cubeOrientation","round","sixFaceAxis","forEach","faceAxis","f","movedPosition","diff","faceVector","j","lineSum1","lineSum2","lineSum3","getScalingFactor","minSize","window","innerHeight","innerWidth","min","max","face","render","transform","map","val"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Cube, { cubeWidth, facePosition } from './Cube';\r\nimport {\r\n    calcPosition,\r\n    calculateResultantAngle,\r\n    getCubePositionDiffrence,\r\n    getTouchPositions\r\n} from '../utilities/utilities';\r\n\r\n\r\nclass CubeContainer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.getOrientation = this.getOrientation.bind(this);\r\n        this.state = {\r\n            positions: [\r\n                [0, 0, 0],\r\n                [-cubeWidth, 0, 0],\r\n                [cubeWidth, 0, 0],\r\n                [0, -cubeWidth, 0],\r\n                [0, cubeWidth, 0],\r\n                [-cubeWidth, -cubeWidth, 0],\r\n                [-cubeWidth, cubeWidth, 0],\r\n                [cubeWidth, -cubeWidth, 0],\r\n                [cubeWidth, cubeWidth, 0],\r\n\r\n                [0, 0, -cubeWidth],\r\n                [-cubeWidth, 0, -cubeWidth],\r\n                [cubeWidth, 0, -cubeWidth],\r\n                [0, -cubeWidth, -cubeWidth],\r\n                [0, cubeWidth, -cubeWidth],\r\n                [-cubeWidth, -cubeWidth, -cubeWidth],\r\n                [-cubeWidth, cubeWidth, -cubeWidth],\r\n                [cubeWidth, -cubeWidth, -cubeWidth],\r\n                [cubeWidth, cubeWidth, -cubeWidth],\r\n\r\n                [0, 0, cubeWidth],\r\n                [-cubeWidth, 0, cubeWidth],\r\n                [cubeWidth, 0, cubeWidth],\r\n                [0, -cubeWidth, cubeWidth],\r\n                [0, cubeWidth, cubeWidth],\r\n                [-cubeWidth, -cubeWidth, cubeWidth],\r\n                [-cubeWidth, cubeWidth, cubeWidth],\r\n                [cubeWidth, -cubeWidth, cubeWidth],\r\n                [cubeWidth, cubeWidth, cubeWidth],\r\n            ],\r\n            angleOfRotation: Array(27).fill(0)\r\n            , rotationVector: Array(27).fill([1, 0, 0]),\r\n            faceRotationAngle: 0\r\n        };\r\n        this.onTouchStart = this.onTouchStart.bind(this);\r\n        this.onTouchMove = this.onTouchMove.bind(this);\r\n        this.onTouchEnd = this.onTouchEnd.bind(this);\r\n        this.rotateCube = this.rotateCube.bind(this);\r\n        this.reArrangeCubes = this.reArrangeCubes.bind(this);\r\n        this.rotateCubeSpace = this.rotateCubeSpace.bind(this);\r\n        this.faceRotationInit=this.faceRotationInit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //adding listener for mouseup\r\n        this.elem.addEventListener('mouseup', this.onTouchEnd);\r\n        this.elem.addEventListener('touchend', this.onTouchEnd);\r\n        this.elem.addEventListener('touchcancel', this.onTouchEnd);\r\n\r\n        //Initial position\r\n        this.rotateCubeSpace(120, 0);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //removeEventListener        \r\n        this.elem.removeEventListener('mouseup', this.onTouchEnd);\r\n        this.elem.removeEventListener('touchend', this.onTouchEnd);\r\n        this.elem.removeEventListener('touchcancel', this.onTouchEnd);\r\n    }\r\n\r\n    /**return css parameters for orientation */\r\n    getOrientation(index) {\r\n        return [this.state.rotationVector[index][0],\r\n        this.state.rotationVector[index][1],\r\n        this.state.rotationVector[index][2],\r\n        this.state.angleOfRotation[index]];\r\n    }\r\n\r\n    /**Touch events */\r\n    onTouchStart(eve) {\r\n        this.setState({\r\n            touchStarted: true, mousePoint: { x: getTouchPositions(eve).clientX, y: getTouchPositions(eve).clientY }\r\n        });\r\n    }\r\n\r\n    rotateCubeSpace(diffX, diffY) {\r\n        let arr = this.state.positions.slice();\r\n        let angleOfRotationArr = [];\r\n        let rotationVectorArr = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i] = Math.abs(diffY) > Math.abs(diffX) ?\r\n                calcPosition(this.state.positions[i], [1, 0, 0], -diffY) :\r\n                calcPosition(this.state.positions[i], [0, 1, 0], diffX);\r\n            let rotationResult = Math.abs(diffY) > Math.abs(diffX) ?\r\n                calculateResultantAngle(-diffY, [1, 0, 0], this.state.rotationVector[i], this.state.angleOfRotation[i]) :\r\n                calculateResultantAngle(diffX, [0, 1, 0], this.state.rotationVector[i], this.state.angleOfRotation[i]);\r\n            angleOfRotationArr[i] = rotationResult.gama;\r\n            rotationVectorArr[i] = rotationResult.rotationVector;\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                positions: arr,\r\n                angleOfRotation: angleOfRotationArr,\r\n                rotationVector: rotationVectorArr\r\n            });\r\n    }\r\n\r\n    onTouchMove(eve) {\r\n        if (this.state.touchStarted) {\r\n            let diffY = getTouchPositions(eve).clientY - this.state.mousePoint.y;\r\n            let diffX = getTouchPositions(eve).clientX - this.state.mousePoint.x;\r\n            this.setState({ mousePoint: { x: getTouchPositions(eve).clientX, y: getTouchPositions(eve).clientY } }, () => {\r\n                this.rotateCubeSpace(diffX, diffY);\r\n            });\r\n        }else if(this.state.touchedFace){\r\n            let diffY = getTouchPositions(eve).clientY - this.state.mousePoint.y;\r\n            let diffX = getTouchPositions(eve).clientX - this.state.mousePoint.x;\r\n            this.setState({ mousePoint: { x: getTouchPositions(eve).clientX, y: getTouchPositions(eve).clientY } });\r\n            this.rotateCube(diffX/2, diffY/2, this.state.positions[this.state.facePositionIndex], \r\n                this.state.touchedFace, this.getOrientation(this.state.facePositionIndex));\r\n        }\r\n    }\r\n\r\n    onTouchEnd() {\r\n        this.setState({ touchStarted: false, mousePoint: {},touchedFace:undefined });\r\n        if (this.state.faceRotationIndex) {\r\n            this.reArrangeCubes();\r\n        }\r\n    }\r\n\r\n    reArrangeCubes() {\r\n        if (this.state.faceRotationAngle % 90 === 0) {\r\n            this.setState({ faceRotationAngle: 0, faceRotationIndex: null, autoRotation: undefined });\r\n            return;\r\n        }\r\n        const currentMove =\r\n            Math.abs(this.state.faceRotationAngle % 90) < 80 &&\r\n                Math.abs(this.state.faceRotationAngle % 90) > 10\r\n                ? 3 : 1;\r\n\r\n        this.setState({\r\n            autoRotation: true, currentMove,\r\n            reverseAngle: (!this.state.autoRotation && ((Math.abs(this.state.faceRotationAngle % 90) < 30))) ?\r\n                !this.state.reverseAngle : this.state.reverseAngle\r\n        }, () => {\r\n            this.rotateCube(Math.sqrt(.5), Math.sqrt(.5), null);\r\n            setTimeout(this.reArrangeCubes, .001);\r\n        });\r\n    }\r\n\r\n    /**Method triggered by child cube on cube movement*/\r\n    rotateCube(xAxisMove, yAxisMove, cubePosition, touchedFace, cubeOrientation) {\r\n\r\n        //avoid face roation while auto move.\r\n        if (this.state.autoRotation && touchedFace)\r\n            return;\r\n\r\n        /** check for no movement*/\r\n        if (xAxisMove === 0 && yAxisMove === 0)\r\n            return;\r\n\r\n        /**resultant move */\r\n        const currentMove = touchedFace ? Math.round(Math.sqrt(xAxisMove * xAxisMove + yAxisMove * yAxisMove)) : this.state.currentMove;\r\n\r\n        /**fetching state data */\r\n        let rotationVector = this.state.rotationVector.slice();\r\n        let angleOfRotation = this.state.angleOfRotation;\r\n        let arr = this.state.positions.slice();\r\n\r\n        /**face vectors for all six faces */\r\n        const sixFaceAxis = [[0, 0, 1], [0, 0, -1], [0, 1, 0], [0, -1, 0], [1, 0, 0], [-1, 0, 0]];\r\n\r\n        sixFaceAxis.forEach((faceAxis, f) => {\r\n            sixFaceAxis[f] = calcPosition(faceAxis, rotationVector[0], angleOfRotation[0]);\r\n        });\r\n\r\n        let index = 0;\r\n        let reverseAngle = false;\r\n        if (touchedFace) {\r\n            let movedPosition;\r\n            let diff = 1000;\r\n\r\n            //check for face roation vector defined\r\n            if (this.state.faceRotationAngle) {\r\n                index = this.state.faceRotationIndex;\r\n                movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[index].slice(), currentMove);\r\n                if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\r\n                    diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\r\n                    reverseAngle = false;\r\n                }\r\n\r\n                movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[index].slice(), -currentMove);\r\n                if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\r\n                    diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\r\n                    reverseAngle = true;\r\n                }\r\n            }\r\n            //fresh rotation\r\n            else {\r\n                let faceVector = [];\r\n                faceVector = calcPosition(facePosition[touchedFace], [cubeOrientation[0], cubeOrientation[1], cubeOrientation[2]], cubeOrientation[3]);\r\n                /**Finding face on which rotation gives matching cube movement */\r\n                for (let i in sixFaceAxis) {\r\n                    if (Math.abs((cubePosition[0] * sixFaceAxis[i][0] + cubePosition[1] * sixFaceAxis[i][1] + cubePosition[2] * sixFaceAxis[i][2]) - cubeWidth) < .1\r\n                        && Math.abs((faceVector[0] * sixFaceAxis[i][0] + faceVector[1] * sixFaceAxis[i][1] + faceVector[2] * sixFaceAxis[i][2]) - cubeWidth) > .1) {\r\n                        movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[i].slice(), currentMove);\r\n                        if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\r\n                            diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\r\n                            index = i;\r\n                            reverseAngle = false;\r\n                        }\r\n\r\n                        movedPosition = calcPosition(cubePosition.slice(), sixFaceAxis[i].slice(), -currentMove);\r\n                        if (diff > getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove)) {\r\n                            diff = getCubePositionDiffrence(movedPosition, cubePosition, xAxisMove, yAxisMove);\r\n                            index = i;\r\n                            reverseAngle = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setState({ 'faceRotationIndex': index, \"reverseAngle\": reverseAngle });\r\n        }\r\n        else {\r\n            reverseAngle = this.state.reverseAngle;\r\n            index = this.state.faceRotationIndex;\r\n        }\r\n\r\n\r\n        /** calculating position of cubes in the face rotation */\r\n        for (let j = 0; j < arr.length; j++) {\r\n            let lineSum1 = (arr[j][0]) * (sixFaceAxis[index][0]);\r\n            let lineSum2 = (arr[j][1]) * (sixFaceAxis[index][1]);\r\n            let lineSum3 = (arr[j][2]) * (sixFaceAxis[index][2]);\r\n\r\n            /** filter for identifying cubes in the rotating face*/\r\n            if (Math.abs((lineSum1 + lineSum2 + lineSum3) - cubeWidth) < .1) {\r\n                arr[j] = calcPosition(this.state.positions[j], sixFaceAxis[index], reverseAngle ? -currentMove : currentMove);\r\n                const rotationResult = calculateResultantAngle(reverseAngle ? -currentMove : currentMove, sixFaceAxis[index], rotationVector[j].slice(), angleOfRotation[j]);\r\n                rotationVector[j] = rotationResult.rotationVector;\r\n                angleOfRotation[j] = rotationResult.gama;\r\n            }\r\n        }\r\n\r\n        /** setting u the state */\r\n        this.setState(\r\n            {\r\n                positions: arr,\r\n                angleOfRotation: angleOfRotation,\r\n                rotationVector: rotationVector,\r\n                faceRotationAngle: this.state.faceRotationAngle + (reverseAngle ? -currentMove : currentMove)\r\n            }\r\n        );\r\n    }\r\n\r\n    getScalingFactor() {\r\n        const minSize = window.innerHeight > window.innerWidth ? window.innerWidth : window.innerHeight;\r\n        return  Math.min(Math.max(minSize/300, 1), 1.5);\r\n    }\r\n\r\n    faceRotationInit(mousePoint,face,index){\r\n        this.setState({touchedFace:face,mousePoint:mousePoint,facePositionIndex:index});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={elem => this.elem = elem}\r\n                className=\"cube-container\"\r\n                style={{transform:`scale(${this.getScalingFactor()})`}}\r\n                onMouseDown={this.onTouchStart}\r\n                onTouchStart={this.onTouchStart}\r\n                onMouseMove={this.onTouchMove}\r\n                onTouchMove={this.onTouchMove}>\r\n                {this.state.positions.map((val, index) => {\r\n                    return (\r\n                        <Cube key={index} faceRotationInit={(mousePoint,face)=>{this.faceRotationInit(mousePoint,face,index)}}\r\n                            translate={this.state.positions[index]} orientation={this.getOrientation(index)} />\r\n                    )\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CubeContainer;"]},"metadata":{},"sourceType":"module"}