{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\dpmas\\\\Desktop\\\\JS Example\\\\test\\\\SunHacksSassyCube\\\\sassy-cube\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\dpmas\\\\Desktop\\\\JS Example\\\\test\\\\SunHacksSassyCube\\\\sassy-cube\\\\src\\\\components\\\\Timer\\\\Timer.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  font-size: 48px;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Speech from 'speak-tts';\nimport { mild, medium, spicy } from '../../constants';\nconst TimerWrapper = styled.div(_templateObject());\n\nvar triggerSpeak = message => {\n  const speech = new Speech(); // will throw an exception if not browser supported\n\n  speech.speak({\n    text: message\n  }).then(() => {\n    console.log(\"Success !\");\n  }).catch(e => {\n    console.error(\"An error occurred :\", e);\n  });\n};\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 1,\n      messagedUsed: []\n    };\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  tick() {\n    // if(this.state.count % 10 === 0) {\n    //   triggerSpeak('Oh... You couldn\\'t solve me? ... How useless.') //RETURN\n    // }\n    if (this.state.count % 15 === 0) {\n      pickMessage(this.state.count);\n    }\n\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  pickMessage() {\n    let randomIndex = 0;\n\n    if (this.state.count <= 90) {\n      //pull from mild\n      randomIndex = Math.floor(Math.random() * mild.length);\n      triggerSpeak(mild[randomIndex]);\n    } else if (this.state.count <= 180) {\n      //pull from medium\n      randomIndex = Math.floor(Math.random() * medium.length);\n      triggerSpeak(medium[randomIndex]);\n    } else if (this.state.count > 180) {\n      //pull from spicy\n      randomIndex = Math.floor(Math.random() * spicy.length);\n      triggerSpeak(spicy[randomIndex]);\n    }\n  }\n\n  startTimer() {\n    clearInterval(this.timer);\n    this.timer = setInterval(this.tick.bind(this), 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  render() {\n    return React.createElement(TimerWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.count));\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["C:\\Users\\dpmas\\Desktop\\JS Example\\test\\SunHacksSassyCube\\sassy-cube\\src\\components\\Timer\\Timer.js"],"names":["React","Component","styled","Speech","mild","medium","spicy","TimerWrapper","div","triggerSpeak","message","speech","speak","text","then","console","log","catch","e","error","Timer","constructor","props","state","count","messagedUsed","componentWillUnmount","clearInterval","timer","tick","pickMessage","setState","randomIndex","Math","floor","random","length","startTimer","setInterval","bind","stopTimer","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport Speech from 'speak-tts';\r\nimport {\r\n  mild, medium, spicy\r\n} from '../../constants';\r\n\r\nconst TimerWrapper = styled.div`\r\n  font-size: 48px;\r\n`;\r\n\r\nvar triggerSpeak = (message) => {\r\n    const speech = new Speech() // will throw an exception if not browser supported\r\n    speech.speak({\r\n        text: message, \r\n    }).then(() => {\r\n        console.log(\"Success !\")\r\n    }).catch(e => {\r\n        console.error(\"An error occurred :\", e)\r\n    })\r\n}\r\n\r\nclass Timer extends Component {\r\n    \r\n    constructor (props) {\r\n      super(props)\r\n      this.state = {\r\n        count: 1, \r\n        messagedUsed: []\r\n      }\r\n    }\r\n\r\n    componentWillUnmount () {\r\n      clearInterval(this.timer)\r\n    }\r\n\r\n    tick () {\r\n      // if(this.state.count % 10 === 0) {\r\n      //   triggerSpeak('Oh... You couldn\\'t solve me? ... How useless.') //RETURN\r\n      // }\r\n      if(this.state.count % 15 === 0) {\r\n        pickMessage(this.state.count)\r\n      }\r\n      \r\n      this.setState({count: (this.state.count + 1)})\r\n    }\r\n\r\n    pickMessage() {\r\n      let randomIndex = 0\r\n      if(this.state.count <= 90) {\r\n        //pull from mild\r\n        randomIndex = Math.floor(Math.random() * mild.length)\r\n        triggerSpeak(mild[randomIndex])\r\n      }\r\n\r\n      else if(this.state.count <= 180) {\r\n        //pull from medium\r\n        randomIndex = Math.floor(Math.random() * medium.length)\r\n        triggerSpeak(medium[randomIndex])\r\n      }\r\n\r\n      else if(this.state.count > 180) {\r\n        //pull from spicy\r\n        randomIndex = Math.floor(Math.random() * spicy.length)\r\n        triggerSpeak(spicy[randomIndex])\r\n      }\r\n\r\n    }\r\n\r\n    startTimer () {\r\n      clearInterval(this.timer)\r\n      this.timer = setInterval(this.tick.bind(this), 1000)\r\n    }\r\n    stopTimer () {\r\n      clearInterval(this.timer)\r\n    }\r\n    componentDidMount() {\r\n      this.startTimer();\r\n    }\r\n\r\n    render () {\r\n      return (\r\n        <TimerWrapper>\r\n          <h1>{this.state.count}</h1>\r\n        </TimerWrapper>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}