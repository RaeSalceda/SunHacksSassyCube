{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dpmas\\\\Desktop\\\\JS Example\\\\test\\\\SunHacksSassyCube\\\\sassy-cube\\\\src\\\\components\\\\Cube.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getTouchPositions } from '../utilities/utilities';\nexport const cubeWidth = 50;\nexport const faceArray = ['front', 'back', 'top', 'bottom', 'left', 'right'];\nexport const facePosition = {\n  left: [-cubeWidth, 0, 0],\n  right: [cubeWidth, 0, 0],\n  front: [0, 0, cubeWidth],\n  back: [0, 0, -cubeWidth],\n  top: [0, -cubeWidth, 0],\n  bottom: [0, cubeWidth, 0]\n};\n\nclass Cube extends Component {\n  constructor(props) {\n    super(props);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    let faceColors = {};\n    faceColors.top = this.props.translate[1] === -cubeWidth ? '#fff' : '';\n    faceColors.bottom = this.props.translate[1] === cubeWidth ? '#FDCC09' : '';\n    faceColors.left = this.props.translate[0] === -cubeWidth ? '#DC422F' : '';\n    faceColors.right = this.props.translate[0] === cubeWidth ? '#FF6C00' : '';\n    faceColors.front = this.props.translate[2] === cubeWidth ? '#009D54' : '';\n    faceColors.back = this.props.translate[2] === -cubeWidth ? '#3D81F6' : '';\n\n    if (Math.abs(this.props.translate[0]) + Math.abs(this.props.translate[1]) + Math.abs(this.props.translate[2]) === cubeWidth) {\n      this.disableFaceRotation = true;\n    }\n\n    this.state = {\n      touchStarted: false,\n      faceColors: faceColors\n    };\n  }\n\n  componentDidMount() {\n    this.elem.addEventListener('mouseup', this.onTouchEnd);\n    this.elem.addEventListener('touchend', this.onTouchEnd);\n    this.elem.addEventListener('touchcancel', this.onTouchEnd);\n  }\n\n  componentWillUnmount() {\n    this.elem.removeEventListener('mouseup', this.onTouchEnd);\n    this.elem.removeEventListener('touchend', this.onTouchEnd);\n    this.elem.removeEventListener('touchcancel', this.onTouchEnd);\n  }\n\n  cubePosition() {\n    return this.props.translate ? {\n      transform: \"translate3d(\".concat(this.props.translate[0], \"px,\").concat(this.props.translate[1], \"px,\").concat(this.props.translate[2], \"px)\\n         rotate3d(\").concat(this.props.orientation[0], \",\").concat(this.props.orientation[1], \",\").concat(this.props.orientation[2], \",\").concat(this.props.orientation[3], \"deg)\")\n    } : {};\n  }\n\n  onTouchStart(eve, face, index) {\n    if (this.disableFaceRotation) return true;\n    eve.stopPropagation();\n    this.props.faceRotationInit({\n      x: getTouchPositions(eve).clientX,\n      y: getTouchPositions(eve).clientY\n    }, face);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: elem => this.elem = elem,\n      className: \"cube\",\n      style: this.cubePosition(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, faceArray.map((face, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        onMouseDown: evt => this.onTouchStart(evt, face),\n        onTouchStart: evt => this.onTouchStart(evt, face),\n        className: 'face ' + face,\n        style: {\n          'backgroundColor': this.state.faceColors[face]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    }));\n  }\n\n}\n\nCube.propTypes = {\n  faceRotationInit: PropTypes.func,\n  translate: PropTypes.array,\n  orientation: PropTypes.array\n};\nexport default Cube;","map":{"version":3,"sources":["C:\\Users\\dpmas\\Desktop\\JS Example\\test\\SunHacksSassyCube\\sassy-cube\\src\\components\\Cube.js"],"names":["React","Component","PropTypes","getTouchPositions","cubeWidth","faceArray","facePosition","left","right","front","back","top","bottom","Cube","constructor","props","onTouchStart","bind","faceColors","translate","Math","abs","disableFaceRotation","state","touchStarted","componentDidMount","elem","addEventListener","onTouchEnd","componentWillUnmount","removeEventListener","cubePosition","transform","orientation","eve","face","index","stopPropagation","faceRotationInit","x","clientX","y","clientY","render","map","evt","propTypes","func","array"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getTouchPositions } from '../utilities/utilities';\r\nexport const cubeWidth = 50;\r\nexport const faceArray = ['front', 'back', 'top', 'bottom', 'left', 'right'];\r\nexport const facePosition = {\r\n    left: [-cubeWidth, 0, 0],\r\n    right: [cubeWidth, 0, 0],\r\n    front: [0, 0, cubeWidth],\r\n    back: [0, 0, -cubeWidth],\r\n    top: [0, -cubeWidth, 0],\r\n    bottom: [0, cubeWidth, 0]\r\n};\r\n\r\nclass Cube extends Component {\r\n\r\n    static propTypes = {\r\n        faceRotationInit: PropTypes.func,\r\n        translate: PropTypes.array,\r\n        orientation: PropTypes.array\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onTouchStart = this.onTouchStart.bind(this);\r\n        let faceColors = {};\r\n        faceColors.top = this.props.translate[1] === -cubeWidth ? '#fff' : '';\r\n        faceColors.bottom = this.props.translate[1] === cubeWidth ? '#FDCC09' : '';\r\n        faceColors.left = this.props.translate[0] === -cubeWidth ? '#DC422F' : '';\r\n        faceColors.right = this.props.translate[0] === cubeWidth ? '#FF6C00' : '';\r\n        faceColors.front = this.props.translate[2] === cubeWidth ? '#009D54' : '';\r\n        faceColors.back = this.props.translate[2] === -cubeWidth ? '#3D81F6' : '';\r\n\r\n        if (Math.abs(this.props.translate[0]) +\r\n            Math.abs(this.props.translate[1]) +\r\n            Math.abs(this.props.translate[2]) === cubeWidth) {\r\n            this.disableFaceRotation=true;\r\n        }\r\n        this.state = {touchStarted: false, faceColors: faceColors};\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.elem.addEventListener('mouseup', this.onTouchEnd);\r\n        this.elem.addEventListener('touchend', this.onTouchEnd);\r\n        this.elem.addEventListener('touchcancel', this.onTouchEnd);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.elem.removeEventListener('mouseup', this.onTouchEnd);\r\n        this.elem.removeEventListener('touchend', this.onTouchEnd);\r\n        this.elem.removeEventListener('touchcancel', this.onTouchEnd);\r\n    }\r\n\r\n    cubePosition() {\r\n        return (\r\n            this.props.translate ? {\r\n                transform: `translate3d(${this.props.translate[0]}px,${this.props.translate[1]}px,${this.props.translate[2]}px)\r\n         rotate3d(${this.props.orientation[0]},${this.props.orientation[1]},${this.props.orientation[2]},${this.props.orientation[3]}deg)`\r\n            } : {});\r\n    }\r\n\r\n    onTouchStart(eve, face,index) {\r\n        if(this.disableFaceRotation)\r\n            return true;\r\n        eve.stopPropagation();\r\n        this.props.faceRotationInit(\r\n            {x: getTouchPositions(eve).clientX, y: getTouchPositions(eve).clientY},\r\n            face\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref={elem => this.elem = elem}\r\n                className=\"cube\" style={this.cubePosition()}>\r\n                {faceArray.map((face, index) => {\r\n                    return <div key={index}\r\n                                onMouseDown={(evt) => this.onTouchStart(evt, face)}\r\n                                onTouchStart={(evt) => this.onTouchStart(evt, face)}\r\n                                className={'face ' + face}\r\n                                style={{ 'backgroundColor': this.state.faceColors[face] }}></div>\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cube;"]},"metadata":{},"sourceType":"module"}